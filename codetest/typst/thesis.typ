#import "@preview/charged-ieee:0.1.0": ieee

#show: ieee.with(
  title: [基于yolo的扑克牌识别],
  abstract: [
    本文详细介绍了如何运用yolo构建一个可以识别扑克牌的图像识别系统。该系统基于YOLOv8模型，展示了不同的性能指标，如mAP等。文章解释了YOLOv8的原理，提供了相应的训练数据集，并集成了一个基于PySide6的界面，展示了最终对于扑克牌的识别结果。
  ],
  authors: (
    (
      name: "李睿涵",
      department: [国科大杭州高等研究院],
    ),
  ),
  index-terms: ("yolov8", "图像识别"),
  bibliography: bibliography("refs.bib"),
)

#set par(first-line-indent: 2em)
= 简介

扑克牌识别作为一项重要的计算机视觉应用，在近年来得到了广泛的研究和应用。其背景不仅仅局限于传统的博彩行业，还扩展到了智能监控、娱乐互动、自动化魔术表演以及教育训练等多个领域。在这些应用中，扑克牌识别技术的意义重大，它可以帮助系统快速准确地识别扑克牌，进而实现自动化决策和处理。本文作者平日在学校里与其他人切磋桥牌时发现了扑克牌识别在桥牌活动中的应用价值，从而开发了一个基于YOLO进行扑克牌识别的程序并撰写了本文。

本文介绍了基于YOLOv8模型以及公开数据集@netwok2020 的同时集成了一个基于PySide6的操作界面的项目，初步实现了识别图像中扑克牌的功能。同时本项目仍然有需要改进的地方，如对于个别牌较低的识别精确率以及对于桥牌叫牌方面识别的缺失等。

本文的主要贡献在于系统地介绍了基于YOLOv8的扑克牌识别软件的设计与实现，包括系统的整体架构、关键技术的选择与优化、以及在实际应用中的性能表现。此外，本文还分享了一系列基于实际项目经验的优化建议和最佳实践，为同领域的研究人员和工程师提供了宝贵的参考。

= 背景

== YOLOv8

YOLOv8@yolo 是YOLO系列实时物体检测器的最新迭代产品，在精度和速度方面都具有尖端性能。在之前YOLO版本的基础上，YOLOv8 引入了新的功能和优化，使其成为广泛应用中各种物体检测任务的理想选择。

YOLOv8 支持多种计算机视觉任务，包括物体检测、实例分割、姿态/关键点检测、定向物体检测和分类。每个模型变体都针对其特定任务进行了优化，并与推理、验证、训练和导出等各种操作模式兼容。

#figure(
  image("yolov8.jpg"),
  caption: [yolov8架构图],
) <yolov8>
\

经过若干年的版本迭代，YOLO已经变的相当复杂，主要包括在Backbone中通过卷积和池化网络结构提取特征，在Neck部分不断地和之前提取的特征进行融合，Head部分则是用来进行最终的检测和输出。

YOLO的Backbone部分通过深度和宽度的平衡、残差连接、多尺度特征图、Batch Normalization和特选的激活函数等技术减少了了计算复杂度的同时也提高了模型对特征的识别能力。

Neck部分，YOLOv8采用了SPP。SPP模块通过使用不同大小的池化窗口，能够有效地捕捉图像中目标的不同尺度信息，这对于处理具有较大尺度变化的目标非常有用。SPP层可增强模型对于不同尺寸目标的处理能力。

此外，YOLOv8在模型设计阶段引入了AutoML技术。这一策略通过自动化的网络架构搜索来优化模型架构。这一进程利用机器学习算法来进行极其广泛的网络结构搜索，从而找到在特定任务上性能最优的模型架构。

YOLO的核心思想在于将整张图作为网络的输入，直接在输出层回归Bounding box的位置以及bounding box所属的类别。

输入图像后，YOLO的CNN网络会将图像划分为S*S的网格。对于每个网格，其会预测B个边框（每个边框具有目标的置信度以及每个边框在多个类别上的预测概率），最终可以根据设置的置信度来得出相应的预测结果。

#figure(
  image("yolo2.png"),
  caption: [yolo算法示例],
) <yolo2>
\

但同时，YOLO对相互靠的较近的物体以及较小的群体预测表现较差，这是其的网格预测方式所导致的。

== 数据集
本项目使用的数据集来自Playing Cards Computer Vision Project项目@netwok2020。它包含了24240张图片，分布在训练集、验证集和测试集中，分别包含21210张、2020张和1010张图片。

可以看到在数据集的构成上，扑克牌的花色及数字的分布是较为均衡的，这样可以避免模型在训练过程中偏向某个特定花色或数字。

而且，可以看到图片的背景是多种多样的，不同的背景图片可以帮助模型适应不同的环境，从而专注于扑克牌信息的获取。

#figure(
  image("dataset.png"),
  caption: [图像尺寸分布图],
) <dataset>
\

如上图所示，大多数扑克牌在图像中的高宽都是比较小的，而且扑克牌的位置也是集中于图像中心的。未来可以在这一方向对数据集或是算法进行相应的优化。

== PySide6
PySide6是一个Python绑定的Qt框架，用于创建跨平台的桌面应用程序。

PySide6基于Qt6库，允许开发人员使用Python语言构建功能丰富的用户界面。它包括了广泛的UI控件，如按钮、文本框、表格、树视图、图表和媒体播放器等，以及高级功能，如网络编程、数据库访问、图像处理和多线程支持。

PySide6与PyQt有着类似的API和功能集，但它们是由不同的组织开发和维护的。PySide6通常被认为是免费和开源的替代品，而PyQt则有商业许可证和GPL许可证两种版本。两者事实上没有本质区别。

= 训练方法

== 准备工作
首先我们需要使用自定义的函数来统计每个类别（扑克牌花色及数字号）出现的次数，帮助模型识别不同类别。

之后我们可以重写构造函数来初始化模型以及其他相关的设置（使用yaml文件配置亦可）。

之后再使用select_device()函数来选择模型训练的设备。你也可以在这一步进行一些图像的预处理。在这一步最关键的是要提取识别到的类别名称，边界框以及置信度。

== 训练过程
我们需要在程序中定义好数据集的名称以及对应的数据集的路径。之后指定好参数，使用train函数调用加载预训练好的YOLO模型即可。

#figure(
  table(
    columns: 3,
    [参数], [设置], [设置],
    [lr0], [0.01], [学习率],
    [lrf], [0.01],[学习率的降低速度],
    [batch], [8],[每次输入模型的样本数],
    [imgz], [640],[输入图像的尺寸],
    [worker], [1],[使用的线程数],
  ),
  caption: [重要参数],
)

当然，你也可以使用默认的参数。

= 实验

#figure(
  image("loss.png"),
  caption: [损失函数图],
) <dataset>
\

可以看到损失随着训练论数的增加而显现出显著下降，并且很快便趋于稳定。这表示模型识别物体的能力逐渐增强。

#figure(
  image("map.png"),
  caption: [map],
) <dataset>
\

同样，map（阈值为50时的平均精确度）也相当不错。只是其中的在50-60epoch时的降低暂时无法解释。

\
实验结果图如下：

#figure(
  image("poker1.png"),
  caption: [实验图1],
) <dataset>
\

#figure(
  image("poker2.png"),
  caption: [实验图2],
) <dataset>
\